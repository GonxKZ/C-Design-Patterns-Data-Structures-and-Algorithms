// Implementación del patrón Strategy con explicaciones detalladas
// Este patrón define una familia de algoritmos, encapsula cada uno y los hace intercambiables

export const strategyPattern = {
  id: 'strategy',
  category: 'behavioral',
  name: 'Strategy',
  description: 'Define una familia de algoritmos, encapsula cada uno y los hace intercambiables. Strategy permite que el algoritmo varíe independientemente de los clientes que lo utilizan, favoreciendo la composición sobre la herencia y facilitando la selección del comportamiento en tiempo de ejecución sin recurrir a condicionales complejos.',
  
  theory: {
    background: 'El patrón Strategy fue formalizado por la Banda de los Cuatro (GoF) en su libro "Design Patterns". Este patrón tiene sus raíces en los principios fundamentales de la programación orientada a objetos, específicamente en el principio "favorecer la composición sobre la herencia" y "encapsular lo que varía". La idea es extraer comportamientos variables en jerarquías de clases separadas, permitiendo que sean intercambiados dinámicamente sin alterar el código cliente que los utiliza.',
    
    problem: 'En muchos sistemas, un mismo problema puede resolverse de diferentes maneras según el contexto. Implementar estas variantes directamente en el código cliente usando condicionales crea dependencias rígidas, dificulta la mantención y viola el principio Open/Closed. A medida que aumentan las variantes o se añaden nuevas condiciones, el código se vuelve cada vez más complejo y propenso a errores. Además, mezclar múltiples algoritmos con la lógica de negocio dificulta la reutilización, el testing y la extensión del sistema cuando aparecen nuevos requisitos.',
    
    solution: 'El patrón Strategy define una familia de algoritmos, encapsula cada uno en una clase separada que implementa una interfaz común, y los hace intercambiables. Permite seleccionar el algoritmo en tiempo de ejecución. La clase contexto mantiene una referencia a una estrategia y delega en ella la ejecución del algoritmo. Esta separación permite modificar, añadir o eliminar algoritmos sin afectar al contexto o a los clientes. El contexto puede cambiar dinámicamente la estrategia utilizada, ya sea por requerimiento del cliente o en respuesta a condiciones de ejecución. El poder del patrón Strategy radica en su capacidad para encapsular algoritmos completos, incluyendo sus dependencias y estado interno, detrás de una interfaz simple y uniforme, lo que facilita enormemente su intercambio y prueba.',
    
    applicability: [
      'Cuando necesitas usar diferentes variantes de un algoritmo dentro de un objeto y poder cambiarlas durante el tiempo de ejecución',
      'Cuando tienes muchas clases relacionadas que solo difieren en su comportamiento',
      'Para aislar la lógica de negocio de una clase de los detalles de implementación de algoritmos que pueden no ser tan importantes en su contexto',
      'Cuando una clase define muchos comportamientos, y estos aparecen como múltiples declaraciones condicionales en sus operaciones',
      'Para eliminar condicionales grandes que seleccionan el comportamiento a ejecutar, reemplazándolos con objetos estrategia',
      'Cuando quieres ocultar la complejidad de múltiples algoritmos del código cliente',
      'Cuando tienes un conjunto de algoritmos donde solo uno será utilizado en un momento dado según las condiciones de ejecución o entradas del cliente',
      'Cuando deseas implementar el principio de responsabilidad única separando la política de selección de algoritmos de su implementación',
      'Para facilitar la adición de nuevos comportamientos sin modificar las clases existentes (Principio Open/Closed)',
      'Cuando diferentes partes de la aplicación tienen requisitos variables para el mismo tipo de operación',
      'Para aislar el conocimiento específico del algoritmo del código que lo utiliza, facilitando cambios y mantenimiento'
    ],
    
    consequences: [
      'Permite la sustitución de algoritmos en tiempo de ejecución',
      'Aísla la implementación de un algoritmo del código que lo utiliza',
      'Elimina condicionales complejos al encapsular algoritmos en clases separadas',
      'Promueve la reutilización de código a través de la herencia o composición de estrategias',
      'Facilita el testing aislado de cada estrategia y del contexto',
      'Facilita la extensión del sistema con nuevas estrategias sin modificar el código existente',
      'Mejora la cohesión al separar comportamientos específicos de la lógica general',
      'Puede aumentar el número de objetos en el sistema, creando sobrecarga si hay muchas estrategias',
      'Incrementa la complejidad inicial debido a la creación de múltiples clases e interfaces',
      'El cliente debe conocer las diferentes estrategias para elegir la apropiada',
      'Puede complicar el diseño si las estrategias requieren comunicación bidireccional con el contexto',
      'Posible sobrecarga de rendimiento en caso de estrategias que requieren estado compartido entre llamadas',
      'Dificultad para mantener la consistencia entre estrategias relacionadas si cambian los requisitos de la interfaz común'
    ],
    
    notes: `
      <h3>¿Cuándo DEBES usar el patrón Strategy?</h3>
      <ul>
        <li><strong>Variantes de algoritmos:</strong> Cuando necesitas diferentes variantes de un algoritmo y quieres poder cambiar entre ellas dinámicamente, como diferentes algoritmos de ordenación (quicksort, mergesort, heapsort) según el tamaño o características de los datos.</li>
        <li><strong>Evitar condicionales extensos:</strong> Cuando tienes grandes bloques de condicionales para seleccionar diferentes comportamientos. Sustituir estos condicionales por estrategias mejora la legibilidad y mantenibilidad.</li>
        <li><strong>Configuración en tiempo de ejecución:</strong> Cuando la aplicación debe configurar comportamientos en tiempo de ejecución, por ejemplo, seleccionar diferentes algoritmos de compresión según el tipo de archivo o preferencias del usuario.</li>
        <li><strong>Flexibilidad en sistemas extensibles:</strong> Cuando desarrollas frameworks o aplicaciones que necesitan ser extendidas por otros desarrolladores con nuevos comportamientos sin modificar el código base.</li>
        <li><strong>Operaciones con políticas variables:</strong> Como estrategias de cálculo de impuestos, validación de datos, rutas de navegación, o algoritmos de pricing, donde las reglas pueden variar según jurisdicción, tipo de usuario o temporada.</li>
        <li><strong>Comportamientos según contexto:</strong> Cuando el comportamiento debe adaptarse según el entorno de ejecución, como estrategias de renderizado optimizadas para diferentes tipos de hardware.</li>
        <li><strong>Múltiples implementaciones de una misma operación:</strong> Por ejemplo, diferentes algoritmos de compresión (ZIP, GZIP, BZIP2), métodos de autenticación (contraseña, biométrica, token), o algoritmos de búsqueda (lineal, binaria, hash).</li>
        <li><strong>Necesidad de cambiar comportamiento a lo largo del ciclo de vida:</strong> Cuando un objeto debe comportarse de forma diferente a lo largo de su vida útil, pero sin cambiar su interfaz pública.</li>
      </ul>
      
      <h3>Variantes del patrón Strategy:</h3>
      <ul>
        <li><strong>Strategy con objetos de función:</strong> En lugar de clases completas, se utilizan funciones u objetos función (lambdas, functors) como estrategias, común en lenguajes con soporte para funciones de primera clase.</li>
        <li><strong>Strategy estático:</strong> Donde la estrategia se selecciona en tiempo de compilación mediante templates o generics, optimizando el rendimiento a costa de la flexibilidad en tiempo de ejecución.</li>
        <li><strong>Strategy con compuestos:</strong> Combinando el patrón Strategy con Composite para crear estrategias que son combinaciones de otras estrategias más simples.</li>
        <li><strong>Strategy contextual:</strong> Donde la estrategia tiene acceso al contexto para adaptar su comportamiento basándose en el estado actual, creando una relación más estrecha pero manteniendo la separación de responsabilidades.</li>
        <li><strong>Strategy con fábrica:</strong> Combinando con el patrón Factory para crear estrategias apropiadas automáticamente según diferentes criterios sin que el cliente necesite conocer los detalles de implementación.</li>
        <li><strong>Strategy con flyweight:</strong> Para reutilizar estrategias comunes entre múltiples contextos, reduciendo la sobrecarga de memoria cuando hay muchas instancias de contexto.</li>
        <li><strong>Strategy paramétrico:</strong> Donde una única estrategia puede configurarse mediante parámetros para exhibir diferentes comportamientos, reduciendo la proliferación de clases de estrategia.</li>
        <li><strong>Strategy dinámico:</strong> Donde las propias estrategias pueden ser generadas o modificadas en tiempo de ejecución, como en programación genética o sistemas que aprenden de su entorno.</li>
      </ul>
      
      <h3>Ejemplos prácticos en aplicaciones reales:</h3>
      <ul>
        <li><strong>Estrategias de navegación GPS:</strong> Ruta más corta, menos tráfico, sin autopistas, etc. Cada estrategia implementa el mismo algoritmo base (encontrar una ruta) pero con diferentes criterios de optimización:</li>
        <pre>
// Ejemplo conceptual en pseudocódigo
function RouteStrategy() {}
RouteStrategy.prototype.calculateRoute = function(start, end) {
  // Método abstracto
  return null;
};

function FastestRouteStrategy() {}
FastestRouteStrategy.prototype = Object.create(RouteStrategy.prototype);
FastestRouteStrategy.prototype.calculateRoute = function(start, end) {
  // Prioriza rutas con mayor velocidad media
  return routeWithMinimumTravelTime(start, end);
};

function ShortestRouteStrategy() {}
ShortestRouteStrategy.prototype = Object.create(RouteStrategy.prototype);
ShortestRouteStrategy.prototype.calculateRoute = function(start, end) {
  // Prioriza rutas con menor distancia
  return routeWithMinimumDistance(start, end);
};

function NavigationApp(routeStrategy) {
  this.routeStrategy = routeStrategy;
}

NavigationApp.prototype.setRouteStrategy = function(strategy) {
  this.routeStrategy = strategy;
};

NavigationApp.prototype.navigateTo = function(destination) {
  const route = this.routeStrategy.calculateRoute(
    currentLocation, 
    destination
  );
  display(route);
};
        </pre>
        
        <li><strong>Métodos de pago en e-commerce:</strong> Diferentes métodos como tarjeta de crédito, PayPal, transferencia bancaria, cada uno con su lógica específica:</li>
        <pre>
// Estrategia de pago en un sistema de comercio electrónico
function PaymentStrategy() {}
PaymentStrategy.prototype.pay = function(amount) {};
PaymentStrategy.prototype.getPaymentDetails = function() {};

function CreditCardStrategy(cardNumber, expiryDate, cvv) {
  this.cardNumber = cardNumber;
  this.expiryDate = expiryDate;
  this.cvv = cvv;
}

CreditCardStrategy.prototype = Object.create(PaymentStrategy.prototype);

CreditCardStrategy.prototype.pay = function(amount) {
  // Procesar pago con tarjeta de crédito a través de pasarela de pago
  console.log("Pagando " + amount + " con tarjeta " + this.cardNumber.substr(-4));
  return processCreditCardPayment(this.cardNumber, this.expiryDate, this.cvv, amount);
}
  
CreditCardStrategy.prototype.getPaymentDetails = function() {
  return {
    method: "Credit Card",
    lastDigits: this.cardNumber.substr(-4),
    expiryDate: this.expiryDate
  };
}

function PayPalStrategy(email, password) {
  this.email = email;
  this.password = password;
}

PayPalStrategy.prototype = Object.create(PaymentStrategy.prototype);

PayPalStrategy.prototype.pay = function(amount) {
  // Autenticar con PayPal y procesar el pago
  console.log("Pagando " + amount + " con PayPal (" + this.email + ")");
  return processPayPalPayment(this.email, this.password, amount);
}
  
PayPalStrategy.prototype.getPaymentDetails = function() {
  return {
    method: "PayPal",
    email: this.email
  };
}

function ShoppingCart() {
  this.items = [];
  this.paymentStrategy = null;
}

ShoppingCart.prototype.addItem = function(item) {
  this.items.push(item);
}
  
ShoppingCart.prototype.setPaymentStrategy = function(strategy) {
  this.paymentStrategy = strategy;
}
  
ShoppingCart.prototype.checkout = function() {
  const amount = this.calculateTotal();
  return this.paymentStrategy.pay(amount);
}
  
ShoppingCart.prototype.getReceipt = function() {
  return {
    items: this.items,
    total: this.calculateTotal(),
    paymentInfo: this.paymentStrategy.getPaymentDetails()
  };
}
  
ShoppingCart.prototype.calculateTotal = function() {
  return this.items.reduce((total, item) => total + item.price, 0);
}
        </pre>
        
        <li><strong>Estrategias de exportación de datos:</strong> Diferentes formatos como CSV, JSON, XML, cada uno con su propia lógica de serialización:</li>
        <pre>
function ExportStrategy() {}
ExportStrategy.prototype.export = function(data) {};
ExportStrategy.prototype.getFileExtension = function() {};

function CSVExportStrategy() {}
CSVExportStrategy.prototype = Object.create(ExportStrategy.prototype);

CSVExportStrategy.prototype.export = function(data) {
  const headers = Object.keys(data[0]).join(',');
  const rows = data.map(item => Object.values(item).join(','));
  return [headers, ...rows].join('\n');
}
  
CSVExportStrategy.prototype.getFileExtension = function() {
  return 'csv';
}

function JSONExportStrategy() {}
JSONExportStrategy.prototype = Object.create(ExportStrategy.prototype);

JSONExportStrategy.prototype.export = function(data) {
  return JSON.stringify(data, null, 2);
}
  
JSONExportStrategy.prototype.getFileExtension = function() {
  return 'json';
}

function XMLExportStrategy() {}
XMLExportStrategy.prototype = Object.create(ExportStrategy.prototype);

XMLExportStrategy.prototype.export = function(data) {
  let xml = '<?xml version="1.0" encoding="UTF-8" ?><items>';
    
  for (const item of data) {
    xml += '<item>';
    for (const [key, value] of Object.entries(item)) {
      xml += `<${key}>${value}</${key}>`;
    }
    xml += '</item>';
  }
    
  xml += '</items>';
  return xml;
}
  
XMLExportStrategy.prototype.getFileExtension = function() {
  return 'xml';
}

function DataExporter(exportStrategy) {
  this.exportStrategy = exportStrategy;
}
  
DataExporter.prototype.setExportStrategy = function(strategy) {
  this.exportStrategy = strategy;
}
  
DataExporter.prototype.exportData = function(data) {
  const output = this.exportStrategy.export(data);
  const filename = `export_${Date.now()}.${this.exportStrategy.getFileExtension()}`;
    
  // Guardar archivo o devolverlo
  return { filename, content: output };
}
        </pre>

        <li><strong>Validación en formularios:</strong> Diferentes estrategias de validación según el tipo de campo (email, teléfono, fecha) o contexto (registro, login, recuperación de contraseña).</li>
        <li><strong>Estrategias de autenticación:</strong> Contraseña local, OAuth, LDAP, autenticación biométrica, donde el sistema de login utiliza la estrategia apropiada según la configuración.</li>
        <li><strong>Algoritmos de renderizado:</strong> En gráficos por computadora, diferentes estrategias para renderizar objetos basadas en complejidad o distancia para optimizar rendimiento.</li>
        <li><strong>Caching:</strong> Diferentes estrategias de caché (LRU, FIFO, TTL) según el tipo de datos o patrones de acceso.</li>
        <li><strong>Pricing dinámico:</strong> En comercio electrónico, diferentes algoritmos de fijación de precios según demanda, inventario, temporada o segmento de cliente.</li>
        <li><strong>Estrategias de compresión de archivos:</strong> Diferentes algoritmos de compresión según el tipo de contenido y requerimientos de tamaño/velocidad.</li>
        <li><strong>Estrategias de persistencia:</strong> Guardar datos en diferentes medios o formatos según configuración o necesidades (SQL, NoSQL, archivo local, memoria, etc).</li>
        <li><strong>Estrategias de notificación:</strong> Enviar notificaciones por diferentes canales (email, SMS, push, in-app) según preferencias del usuario o tipo de mensaje.</li>
        <li><strong>Algoritmos de IA:</strong> Seleccionar diferentes modelos de machine learning según el tipo de datos, precisión requerida o recursos disponibles.</li>
      </ul>
      
      <h3>Implementación Efectiva:</h3>
      <ul>
        <li><strong>Interfaces claras:</strong> Define una interfaz estrategia con métodos precisos que capturen la variabilidad esencial.</li>
        <li><strong>Estrategias por defecto:</strong> Proporciona una estrategia predeterminada para simplificar el uso inicial.</li>
        <li><strong>Comportamiento nulo:</strong> Considera implementar una "estrategia nula" que no haga nada, como alternativa a comprobar si existe una estrategia.</li>
        <li><strong>Contexto independiente:</strong> El contexto no debería depender de los detalles de implementación de las estrategias concretas.</li>
        <li><strong>Estrategias parametrizadas:</strong> Permite configurar estrategias mediante parámetros para hacerlas más flexibles sin proliferar clases.</li>
        <li><strong>Considera funciones:</strong> En lenguajes con funciones de primera clase, una simple función puede ser más adecuada que una clase completa para estrategias simples.</li>
        <li><strong>Evita estado en estrategias:</strong> Preferiblemente, las estrategias deberían ser stateless para facilitar su reutilización entre diferentes contextos.</li>
        <li><strong>Extrae solo lo que varía:</strong> No extraigas todo el comportamiento a estrategias, sino solo las partes que realmente podrían cambiar.</li>
        <li><strong>Estrategias anidadas:</strong> Considera la posibilidad de componer estrategias para resolver problemas complejos (patrón Composite con Strategy).</li>
        <li><strong>Prioriza testabilidad:</strong> Diseña estrategias fácilmente verificables, idealmente con una única responsabilidad bien definida.</li>
        <li><strong>Documentación clara:</strong> Documenta el propósito y comportamiento esperado de cada estrategia para facilitar su selección y uso.</li>
        <li><strong>Estrategias internas:</strong> En algunos casos, las estrategias pueden ser clases internas del contexto para limitar su visibilidad si no se necesitan externamente.</li>
      </ul>
      
      <h3>Strategy vs State vs Command vs Template Method:</h3>
      <ul>
        <li><strong>Strategy:</strong> Se centra en cómo hacer algo, encapsulando diferentes algoritmos que son intercambiables. El cliente o contexto selecciona explícitamente qué estrategia usar.</li>
        <li><strong>State:</strong> También encapsula comportamientos, pero estos están vinculados a estados específicos del objeto. La transición entre estados y, por tanto, comportamientos, ocurre implícitamente basada en reglas internas.</li>
        <li><strong>Command:</strong> Encapsula una solicitud completa como un objeto, permitiendo parametrizar clientes con operaciones, encolar solicitudes y soportar operaciones reversibles. Se enfoca en qué hacer, no en cómo hacerlo.</li>
        <li><strong>Template Method:</strong> Define el esqueleto de un algoritmo, delegando algunos pasos a las subclases. A diferencia de Strategy, usa herencia en lugar de composición y tiene una estructura fija con puntos de extensión predefinidos.</li>
        <li><strong>Decorator:</strong> Añade responsabilidades a objetos dinámicamente, mientras que Strategy cambia el comportamiento interno sin añadir responsabilidades.</li>
        <li><strong>Bridge:</strong> Separa una abstracción de su implementación, permitiendo que ambas varíen independientemente. Strategy se enfoca más en intercambiar algoritmos que en desacoplar abstracciones de implementaciones.</li>
        <li><strong>Visitor:</strong> Permite añadir nuevas operaciones a una jerarquía de clases sin modificarlas. Mientras Strategy cambia cómo se hace algo dentro de un contexto, Visitor añade qué puede hacerse con un conjunto de objetos.</li>
        <li><strong>Chain of Responsibility:</strong> Pasa una solicitud a lo largo de una cadena de manejadores hasta que uno la procese. Difiere de Strategy en que no se sabe a priori quién manejará la solicitud.</li>
      </ul>

      <h3>Consideraciones de rendimiento y escalabilidad:</h3>
      <ul>
        <li><strong>Creación de estrategias:</strong> Si las estrategias son costosas de crear, considera el uso de Flyweight o Singleton para compartir instancias cuando sea seguro.</li>
        <li><strong>Estado compartido:</strong> Si el estado entre el contexto y las estrategias debe compartirse, evalúa el impacto en el acoplamiento y posibles alternativas como pasar explícitamente la información necesaria.</li>
        <li><strong>Estrategias inmutables:</strong> Considera hacer las estrategias inmutables para facilitar su uso seguro en entornos concurrentes.</li>
        <li><strong>Lazy initialization:</strong> Si hay muchas estrategias posibles pero solo se usa un subconjunto en cada sesión, considera crearlas bajo demanda.</li>
        <li><strong>Caché de estrategias:</strong> Para aplicaciones con alta carga, mantener un caché de estrategias recientes puede mejorar el rendimiento si hay patrones predecibles de uso.</li>
        <li><strong>Granularidad:</strong> Evalúa cuidadosamente el nivel de granularidad de las estrategias; demasiado fino puede llevar a explosión de clases, demasiado grueso puede reducir la flexibilidad.</li>
        <li><strong>Impacto en la UI:</strong> Si el cambio de estrategia afecta la interfaz de usuario, coordina adecuadamente las actualizaciones para evitar inconsistencias visuales.</li>
        <li><strong>Persistencia:</strong> Si el contexto debe persistirse, considera cómo serializar o guardar la estrategia actual para restaurar el estado correctamente.</li>
      </ul>
    `
  },
  
  implementations: {
    cppTraditional: {
      code: `// La interfaz Strategy que declara operaciones comunes a todas las versiones soportadas
class Strategy {
public:
    virtual ~Strategy() {}
    virtual std::string doAlgorithm(const std::vector<std::string> &data) const = 0;
};

// Implementaciones concretas del algoritmo
class ConcreteStrategyA : public Strategy {
public:
    std::string doAlgorithm(const std::vector<std::string> &data) const override {
        // Ordenamos ascendentemente
        std::string result;
        for (const std::string &item : data) {
            result += item + ", ";
        }
        
        std::sort(result.begin(), result.end());
        return result;
    }
};

class ConcreteStrategyB : public Strategy {
public:
    std::string doAlgorithm(const std::vector<std::string> &data) const override {
        // Ordenamos descendentemente
        std::string result;
        for (const std::string &item : data) {
            result += item + ", ";
        }
        
        std::sort(result.begin(), result.end(), std::greater<>());
        return result;
    }
};

// El Contexto define la interfaz de interés para los clientes
class Context {
private:
    Strategy* strategy_; // Puntero a la estrategia actual

public:
    // Constructor que acepta una estrategia inicial
    Context(Strategy* strategy = nullptr) : strategy_(strategy) {}
    
    // Destructor que libera la estrategia
    ~Context() {
        delete strategy_;
    }
    
    // Método para cambiar la estrategia en tiempo de ejecución
    void setStrategy(Strategy* strategy) {
        delete strategy_; // Liberamos la estrategia anterior
        strategy_ = strategy;
    }
    
    // El Contexto delega parte del trabajo al objeto Strategy
    std::string doSomeBusinessLogic() const {
        if (strategy_) {
            // El Contexto llama al algoritmo de la estrategia
            std::vector<std::string> data = {"a", "b", "c", "d", "e"};
            return "Contexto: Ordenando datos usando la estrategia (" + strategy_->doAlgorithm(data) + ")";
        } else {
            return "Contexto: No hay estrategia configurada";
        }
    }
};

// Código cliente
int main() {
    // Creamos el contexto con una estrategia concreta
    Context* context = new Context(new ConcreteStrategyA());
    std::cout << "Cliente: Estrategia está configurada para ordenar ascendentemente" << std::endl;
    std::cout << context->doSomeBusinessLogic() << std::endl;
    
    std::cout << std::endl;
    
    // Cambiamos la estrategia
    std::cout << "Cliente: Cambiando estrategia para ordenar descendentemente" << std::endl;
    context->setStrategy(new ConcreteStrategyB());
    std::cout << context->doSomeBusinessLogic() << std::endl;
    
    // Liberamos memoria
    delete context;
    
    return 0;
}`,
      explanation: [
        { line: 2, text: "Definición de la interfaz Strategy que todas las estrategias concretas deben implementar." },
        { line: 4, text: "Destructor virtual para asegurar la limpieza adecuada de las clases derivadas." },
        { line: 5, text: "Método virtual puro que define la operación que realizarán las estrategias." },
        { line: 9, text: "Primera implementación concreta de la estrategia." },
        { line: 11, text: "Implementa doAlgorithm para ordenar de forma ascendente." },
        { line: 12, text: "Crea una cadena con los elementos recibidos." },
        { line: 17, text: "Ordena la cadena de forma ascendente." },
        { line: 22, text: "Segunda implementación concreta de la estrategia." },
        { line: 24, text: "Implementa doAlgorithm para ordenar de forma descendente." },
        { line: 31, text: "Utiliza std::greater para ordenar de forma descendente." },
        { line: 36, text: "Clase Context que utiliza una estrategia para realizar operaciones." },
        { line: 38, text: "Puntero a la estrategia actual." },
        { line: 41, text: "Constructor que acepta una estrategia inicial (opcional)." },
        { line: 44, text: "Destructor que libera la memoria de la estrategia." },
        { line: 49, text: "Método para cambiar la estrategia en tiempo de ejecución." },
        { line: 50, text: "Libera la memoria de la estrategia anterior antes de asignar la nueva." },
        { line: 55, text: "Método que utiliza la estrategia actual para realizar una operación." },
        { line: 56, text: "Verifica que haya una estrategia configurada." },
        { line: 58, text: "Datos de ejemplo para la operación." },
        { line: 59, text: "Llama al método doAlgorithm de la estrategia actual." },
        { line: 67, text: "Código cliente que demuestra el uso del patrón." },
        { line: 69, text: "Crea un contexto con una estrategia inicial (ordenamiento ascendente)." },
        { line: 71, text: "Ejecuta la operación con la estrategia actual." },
        { line: 76, text: "Cambia la estrategia a ordenamiento descendente." },
        { line: 77, text: "Ejecuta la operación con la nueva estrategia." },
        { line: 80, text: "Libera la memoria del contexto (que a su vez libera la estrategia)." }
      ]
    },
    cppModern: {
      code: `// La interfaz Strategy que declara operaciones comunes a todas las versiones soportadas
class Strategy {
public:
    virtual ~Strategy() = default;
    virtual std::string doAlgorithm(const std::vector<std::string> &data) const = 0;
};

// Implementaciones concretas del algoritmo
class ConcreteStrategyA : public Strategy {
public:
    std::string doAlgorithm(const std::vector<std::string> &data) const override {
        // Ordenamos ascendentemente
        std::string result;
        for (const auto &item : data) {
            result += item + ", ";
        }
        
        std::sort(result.begin(), result.end());
        return result;
    }
};

class ConcreteStrategyB : public Strategy {
public:
    std::string doAlgorithm(const std::vector<std::string> &data) const override {
        // Ordenamos descendentemente
        std::string result;
        for (const auto &item : data) {
            result += item + ", ";
        }
        
        std::sort(result.begin(), result.end(), std::greater<>());
        return result;
    }
};

// El Contexto define la interfaz de interés para los clientes
class Context {
private:
    std::unique_ptr<Strategy> strategy_; // Puntero inteligente a la estrategia actual

public:
    // Constructor que acepta una estrategia inicial
    explicit Context(std::unique_ptr<Strategy> strategy = nullptr) 
        : strategy_(std::move(strategy)) {}
    
    // No necesitamos un destructor explícito gracias a unique_ptr
    
    // Método para cambiar la estrategia en tiempo de ejecución
    void setStrategy(std::unique_ptr<Strategy> strategy) {
        strategy_ = std::move(strategy);
    }
    
    // El Contexto delega parte del trabajo al objeto Strategy
    std::string doSomeBusinessLogic() const {
        if (strategy_) {
            // El Contexto llama al algoritmo de la estrategia
            std::vector<std::string> data = {"a", "b", "c", "d", "e"};
            return "Contexto: Ordenando datos usando la estrategia (" + strategy_->doAlgorithm(data) + ")";
        } else {
            return "Contexto: No hay estrategia configurada";
        }
    }
};

// Código cliente
int main() {
    // Creamos el contexto con una estrategia concreta
    auto context = std::make_unique<Context>(std::make_unique<ConcreteStrategyA>());
    std::cout << "Cliente: Estrategia está configurada para ordenar ascendentemente" << std::endl;
    std::cout << context->doSomeBusinessLogic() << std::endl;
    
    std::cout << std::endl;
    
    // Cambiamos la estrategia
    std::cout << "Cliente: Cambiando estrategia para ordenar descendentemente" << std::endl;
    context->setStrategy(std::make_unique<ConcreteStrategyB>());
    std::cout << context->doSomeBusinessLogic() << std::endl;
    
    // No es necesario liberar memoria explícitamente
    
    return 0;
}`,
      explanation: [
        { line: 2, text: "Definición de la interfaz Strategy que todas las estrategias concretas deben implementar." },
        { line: 4, text: "Destructor virtual usando = default (C++11)." },
        { line: 9, text: "Primera implementación concreta de la estrategia." },
        { line: 13, text: "Uso de 'auto' para inferencia de tipo (C++11)." },
        { line: 22, text: "Segunda implementación concreta de la estrategia." },
        { line: 36, text: "Clase Context que utiliza una estrategia para realizar operaciones." },
        { line: 38, text: "Uso de std::unique_ptr para gestión automática de memoria." },
        { line: 42, text: "Constructor explícito con un parámetro de tipo unique_ptr." },
        { line: 43, text: "Uso de std::move para transferir la propiedad del puntero (C++11)." },
        { line: 45, text: "No necesitamos un destructor explícito gracias a unique_ptr." },
        { line: 48, text: "Método para cambiar la estrategia en tiempo de ejecución." },
        { line: 49, text: "Asignamos el nuevo puntero sin necesidad de liberar el anterior explícitamente." },
        { line: 66, text: "Código cliente que demuestra el uso del patrón." },
        { line: 68, text: "Uso de std::make_unique (C++14) para crear objetos de forma segura." },
        { line: 75, text: "Cambia la estrategia usando make_unique." },
        { line: 78, text: "No necesitamos liberar memoria manualmente." }
      ]
    },
    java: {
      code: `// La interfaz Strategy que declara operaciones comunes a todas las estrategias
interface Strategy {
    String doAlgorithm(List<String> data);
}

// Implementaciones concretas del algoritmo
class ConcreteStrategyA implements Strategy {
    @Override
    public String doAlgorithm(List<String> data) {
        // Ordenamos ascendentemente
        List<String> copy = new ArrayList<>(data);
        Collections.sort(copy);
        
        return copy.toString();
    }
}

class ConcreteStrategyB implements Strategy {
    @Override
    public String doAlgorithm(List<String> data) {
        // Ordenamos descendentemente
        List<String> copy = new ArrayList<>(data);
        Collections.sort(copy, Collections.reverseOrder());
        
        return copy.toString();
    }
}

// El Contexto define la interfaz de interés para los clientes
class Context {
    // Referencia a la estrategia actual
    private Strategy strategy;

    // Constructor que acepta una estrategia inicial
    public Context() {
        this.strategy = null;
    }
    
    // Constructor alternativo
    public Context(Strategy strategy) {
        this.strategy = strategy;
    }
    
    // Método para cambiar la estrategia en tiempo de ejecución
    public void setStrategy(Strategy strategy) {
        this.strategy = strategy;
    }
    
    // El Contexto delega parte del trabajo al objeto Strategy
    public String doSomeBusinessLogic() {
        if (strategy != null) {
            // El Contexto llama al algoritmo de la estrategia
            List<String> data = Arrays.asList("a", "b", "c", "d", "e");
            return "Contexto: Ordenando datos usando la estrategia (" + strategy.doAlgorithm(data) + ")";
        } else {
            return "Contexto: No hay estrategia configurada";
        }
    }
}

// Demostración del patrón Strategy
public class StrategyDemo {
    public static void main(String[] args) {
        // Creamos el contexto con una estrategia concreta
        Context context = new Context(new ConcreteStrategyA());
        System.out.println("Cliente: Estrategia está configurada para ordenar ascendentemente");
        System.out.println(context.doSomeBusinessLogic());
        
        System.out.println();
        
        // Cambiamos la estrategia
        System.out.println("Cliente: Cambiando estrategia para ordenar descendentemente");
        context.setStrategy(new ConcreteStrategyB());
        System.out.println(context.doSomeBusinessLogic());
    }
}`,
      explanation: [
        { line: 2, text: "Definición de la interfaz Strategy que todas las estrategias concretas deben implementar." },
        { line: 6, text: "Primera implementación concreta de la estrategia." },
        { line: 10, text: "Creamos una copia de la lista para no modificar la original." },
        { line: 11, text: "Ordenamos la copia de forma ascendente usando Collections.sort." },
        { line: 17, text: "Segunda implementación concreta de la estrategia." },
        { line: 21, text: "Ordenamos la copia de forma descendente usando reverseOrder como comparador." },
        { line: 28, text: "Clase Context que utiliza una estrategia para realizar operaciones." },
        { line: 30, text: "Referencia a la estrategia actual (no hay punteros en Java)." },
        { line: 33, text: "Constructor sin parámetros que inicializa sin estrategia." },
        { line: 38, text: "Constructor alternativo que acepta una estrategia inicial." },
        { line: 43, text: "Método para cambiar la estrategia en tiempo de ejecución." },
        { line: 48, text: "Método que utiliza la estrategia actual para realizar una operación." },
        { line: 51, text: "Usamos Arrays.asList para crear los datos de ejemplo." },
        { line: 58, text: "Clase de demostración con el método main." },
        { line: 60, text: "Creamos un contexto con una estrategia inicial (ordenamiento ascendente)." },
        { line: 67, text: "Cambiamos la estrategia a ordenamiento descendente." },
        { line: 68, text: "No es necesario liberar la memoria manualmente." }
      ]
    }
  },
  comparisons: [
    {
      title: "Gestión de memoria",
      cppTraditional: "Requiere gestión manual con new/delete para crear y destruir estrategias.",
      cppModern: "Usa punteros inteligentes (unique_ptr) para gestionar automáticamente la memoria.",
      java: "No requiere gestión de memoria gracias al recolector de basura (Garbage Collector)."
    },
    {
      title: "Declaración",
      cppTraditional: "Usa herencia para declarar la interfaz Strategy con métodos virtuales puros.",
      cppModern: "Similar a C++ tradicional pero con sintaxis moderna (= default, etc.).",
      java: "Define explícitamente una interfaz usando la palabra clave 'interface'."
    },
    {
      title: "Transferencia de objetos",
      cppTraditional: "Transferencia mediante punteros crudos, lo que puede llevar a problemas de propiedad.",
      cppModern: "Usa std::move para transferir la propiedad de un puntero inteligente, evitando copias innecesarias.",
      java: "No hay concepto de propiedad o movimiento, solo referencias a objetos."
    },
    {
      title: "Manejo de colecciones",
      cppTraditional: "Iteración explícita y tipado explícito.",
      cppModern: "Uso de auto para inferencia de tipo en bucles y otras operaciones.",
      java: "Operaciones más sencillas con colecciones a través de la biblioteca Collections."
    }
  ],
  notes: 'El patrón Strategy es particularmente útil en lenguajes orientados a objetos que soportan interfaces y polimorfismo. Sin embargo, en lenguajes con funciones de primera clase como JavaScript, Python o lenguajes funcionales, a menudo se puede implementar de forma más sencilla utilizando funciones en lugar de clases. Las implementaciones modernas en lenguajes con tipado estático pueden aprovechar genéricos/templates para crear estrategias más flexibles y type-safe. El patrón Strategy a menudo se combina con otros patrones como Factory Method para crear estrategias adecuadas, Singleton para estrategias sin estado que pueden ser compartidas, o Flyweight para optimizar el uso de memoria cuando se utilizan muchas instancias. Al implementar este patrón, es importante considerar el equilibrio entre flexibilidad y complejidad, y evaluar si la variabilidad del comportamiento justifica la introducción de este patrón.'
};

// Exportamos el patrón
export default strategyPattern;
